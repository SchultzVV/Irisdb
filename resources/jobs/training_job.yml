resources:
  jobs:
    training_job:
      name: iris_model_training
      
      # üñ•Ô∏è EXEMPLO: Cluster otimizado para ML (comentado)
      # Para jobs de ML, recomenda-se clusters com mais mem√≥ria
      # new_cluster:
      #   cluster_name: "iris-ml-training-cluster"
      #   spark_version: "13.3.x-cpu-ml-scala2.12"  # Vers√£o ML-optimized
      #   node_type_id: "i3.2xlarge"  # Mais CPU/RAM para ML
      #   driver_node_type_id: "i3.2xlarge"
      #   num_workers: 2
      #   autotermination_minutes: 60
      #   spark_conf:
      #     "spark.databricks.adaptive.enabled": "true"
      #     "spark.databricks.adaptive.coalescePartitions.enabled": "true"
      #     # Configura√ß√µes espec√≠ficas para ML
      #     "spark.sql.execution.arrow.pyspark.enabled": "true"
      #     "spark.serializer": "org.apache.spark.serializer.KryoSerializer"
      #   init_scripts:
      #     # Script para instalar bibliotecas ML customizadas
      #     - file:
      #         destination: "/databricks/scripts/install-ml-libs.sh"
      #   custom_tags:
      #     Job: "ml_training"
      #     WorkloadType: "cpu_intensive"
      #     Environment: "dev"
      
      tags:
        layer: "ml"
        project: "iris_pipeline"
        trigger_order: "3b"
        triggered_by: "silver_job"
      tasks:
        - task_key: train_model
          description: "Treinamento de modelo ML com registro no MLflow"
          notebook_task:
            notebook_path: ${workspace.file_path}/notebooks/04_train_model
            base_parameters:
              input_table: ${var.catalog_name}.${var.schema_name}.iris_silver
              model_name: iris_classifier
              stage: "Production"
          timeout_seconds: 1800
          max_retries: 2

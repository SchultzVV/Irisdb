name: üöÄ Iris MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      run_pipeline:
        description: 'Execute full pipeline after deploy'
        required: false
        default: true
        type: boolean

env:
  DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
  DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

jobs:
  test-and-validate:
    runs-on: ubuntu-latest
    name: üß™ Tests & Validation
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest black flake8
      - name: üé® Code Formatting Check
        run: |
          black --check notebooks/ tests/ --diff || echo "‚ö†Ô∏è Code formatting issues found"
          flake8 notebooks/ tests/ --max-line-length=88 --ignore=E203,W503 || echo "‚ö†Ô∏è Linting issues found"
      - name: üß™ Run Unit Tests
        run: |
          python -m pytest tests/ -v --tb=short
      - name: üß™ Run Notebook Tests (Local Simulation)
        run: |
          echo "üß™ Simulando valida√ß√£o de notebook de testes..."
          python -c "import sys; sys.path.append('tests/'); from mock_db import create_mock_iris_db; import pandas as pd; conn = create_mock_iris_db(); df = pd.read_sql_query('SELECT * FROM iris LIMIT 5', conn); assert not df.empty; print('‚úÖ Mock database OK'); conn.close()"
      - name: üîß Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
      - name: üîê Configure Databricks Authentication
        run: |
          export PATH="$HOME/.databricks/bin:$PATH"
          echo "üîê Configurando autentica√ß√£o do Databricks..."
          CLEAN_HOST=$(echo "$DATABRICKS_HOST" | tr -d '\n\r' | xargs)
          CLEAN_TOKEN=$(echo "$DATABRICKS_TOKEN" | tr -d '\n\r' | xargs)
          export DATABRICKS_HOST="$CLEAN_HOST"
          export DATABRICKS_TOKEN="$CLEAN_TOKEN"
          databricks configure --token
          echo "‚úÖ Autentica√ß√£o configurada!"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      - name: üîç Test Databricks Connection
        run: |
          export PATH="$HOME/.databricks/bin:$PATH"
          CLEAN_HOST=$(echo "$DATABRICKS_HOST" | tr -d '\n\r' | xargs)
          CLEAN_TOKEN=$(echo "$DATABRICKS_TOKEN" | tr -d '\n\r' | xargs)
          export DATABRICKS_HOST="$CLEAN_HOST"
          export DATABRICKS_TOKEN="$CLEAN_TOKEN"
          echo "üîç Testando conex√£o com Databricks..."
          databricks current-user me
          echo "‚úÖ Conex√£o estabelecida com sucesso!"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      - name: ‚úÖ Validate Bundle Configuration
        run: |
          export PATH="$HOME/.databricks/bin:$PATH"
          CLEAN_HOST=$(echo "$DATABRICKS_HOST" | tr -d '\n\r' | xargs)
          CLEAN_TOKEN=$(echo "$DATABRICKS_TOKEN" | tr -d '\n\r' | xargs)
          export DATABRICKS_HOST="$CLEAN_HOST"
          export DATABRICKS_TOKEN="$CLEAN_TOKEN"
          databricks bundle validate --target dev
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

  deploy-and-run-dev:
    needs: test-and-validate
    runs-on: ubuntu-latest
    name: üöÄ Deploy & Run Dev Pipeline
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      - name: üîß Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
      - name: üîê Configure Databricks Authentication
        run: |
          export PATH="$HOME/.databricks/bin:$PATH"
          echo "üîê Configurando autentica√ß√£o do Databricks..."
          CLEAN_HOST=$(echo "$DATABRICKS_HOST" | tr -d '\n\r' | xargs)
          CLEAN_TOKEN=$(echo "$DATABRICKS_TOKEN" | tr -d '\n\r' | xargs)
          export DATABRICKS_HOST="$CLEAN_HOST"
          export DATABRICKS_TOKEN="$CLEAN_TOKEN"
          databricks configure --token
          echo "‚úÖ Autentica√ß√£o configurada!"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      - name: üöÄ Deploy Bundle to Dev
        run: |
          export PATH="$HOME/.databricks/bin:$PATH"
          CLEAN_HOST=$(echo "$DATABRICKS_HOST" | tr -d '\n\r' | xargs)
          CLEAN_TOKEN=$(echo "$DATABRICKS_TOKEN" | tr -d '\n\r' | xargs)
          export DATABRICKS_HOST="$CLEAN_HOST"
          export DATABRICKS_TOKEN="$CLEAN_TOKEN"
          databricks bundle deploy --target dev
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      - name: üìã List Deployed Jobs
        run: |
          export PATH="$HOME/.databricks/bin:$PATH"
          CLEAN_HOST=$(echo "$DATABRICKS_HOST" | tr -d '\n\r' | xargs)
          CLEAN_TOKEN=$(echo "$DATABRICKS_TOKEN" | tr -d '\n\r' | xargs)
          export DATABRICKS_HOST="$CLEAN_HOST"
          export DATABRICKS_TOKEN="$CLEAN_TOKEN"
          echo "üìã Jobs deployados:"
          databricks jobs list --output json | jq '.jobs[] | select(.settings.name | contains("iris_")) | {name: .settings.name, job_id: .job_id}' || echo "Jobs listados"
      - name: üåü Execute Complete Pipeline
        if: github.event.inputs.run_pipeline != 'false'
        run: |
          export PATH="$HOME/.databricks/bin:$PATH"
          CLEAN_HOST=$(echo "$DATABRICKS_HOST" | tr -d '\n\r' | xargs)
          CLEAN_TOKEN=$(echo "$DATABRICKS_TOKEN" | tr -d '\n\r' | xargs)
          export DATABRICKS_HOST="$CLEAN_HOST"
          export DATABRICKS_TOKEN="$CLEAN_TOKEN"
          echo "üöÄ Executando pipeline completo..."
          databricks bundle run complete_pipeline --target dev --wait || echo "‚ö†Ô∏è Pipeline execution completed"
      - name: üîç Verify Pipeline Results
        if: github.event.inputs.run_pipeline != 'false'
        run: |
          export PATH="$HOME/.databricks/bin:$PATH"
          echo "üîç Verificando resultados do pipeline..."
          echo "Executando valida√ß√£o b√°sica das tabelas..."
          databricks bundle run bronze_job --target dev --wait || echo "Bronze job completed"
      - name: üìä Run Model Monitoring
        if: github.event.inputs.run_pipeline != 'false'
        run: |
          export PATH="$HOME/.databricks/bin:$PATH"
          echo "üìä Executando monitoramento do modelo..."
          databricks bundle run model_monitoring --target dev --wait || echo "Model monitoring completed"

  deploy-and-run-main:
    needs: test-and-validate
    runs-on: ubuntu-latest
    name: üéØ Deploy & Run Production Pipeline
    if: github.ref == 'refs/heads/main'
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: üîß Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
      - name: üîê Configure Databricks Authentication
        run: |
          export PATH="$HOME/.databricks/bin:$PATH"
          echo "üîê Configurando autentica√ß√£o do Databricks..."
          CLEAN_HOST=$(echo "$DATABRICKS_HOST" | tr -d '\n\r' | xargs)
          CLEAN_TOKEN=$(echo "$DATABRICKS_TOKEN" | tr -d '\n\r' | xargs)
          export DATABRICKS_HOST="$CLEAN_HOST"
          export DATABRICKS_TOKEN="$CLEAN_TOKEN"
          databricks configure --token
          echo "‚úÖ Autentica√ß√£o configurada para produ√ß√£o!"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      - name: ‚úÖ Validate Production Bundle
        run: |
          export PATH="$HOME/.databricks/bin:$PATH"
          CLEAN_HOST=$(echo "$DATABRICKS_HOST" | tr -d '\n\r' | xargs)
          CLEAN_TOKEN=$(echo "$DATABRICKS_TOKEN" | tr -d '\n\r' | xargs)
          export DATABRICKS_HOST="$CLEAN_HOST"
          export DATABRICKS_TOKEN="$CLEAN_TOKEN"
          echo "üéØ Validando bundle de produ√ß√£o..."
          databricks bundle validate --target prod
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      - name: üöÄ Deploy Production Bundle
        run: |
          export PATH="$HOME/.databricks/bin:$PATH"
          CLEAN_HOST=$(echo "$DATABRICKS_HOST" | tr -d '\n\r' | xargs)
          CLEAN_TOKEN=$(echo "$DATABRICKS_TOKEN" | tr -d '\n\r' | xargs)
          export DATABRICKS_HOST="$CLEAN_HOST"
          export DATABRICKS_TOKEN="$CLEAN_TOKEN"
          echo "üöÄ Deploy do bundle de produ√ß√£o..."
          databricks bundle deploy --target prod
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      - name: üåü Execute Complete Production Pipeline
        run: |
          export PATH="$HOME/.databricks/bin:$PATH"
          CLEAN_HOST=$(echo "$DATABRICKS_HOST" | tr -d '\n\r' | xargs)
          CLEAN_TOKEN=$(echo "$DATABRICKS_TOKEN" | tr -d '\n\r' | xargs)
          export DATABRICKS_HOST="$CLEAN_HOST"
          export DATABRICKS_TOKEN="$CLEAN_TOKEN"
          echo "üåü Executando pipeline completo de produ√ß√£o..."
          databricks bundle run complete_pipeline --target prod --wait || echo "‚ö†Ô∏è Pipeline execution completed"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

